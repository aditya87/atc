// This file was generated by counterfeiter
package lockfakes

import (
	"sync"

	"github.com/concourse/atc/db/lock"
)

type FakeConnector struct {
	ConnectStub        func() (lock.DelegateConn, error)
	connectMutex       sync.RWMutex
	connectArgsForCall []struct{}
	connectReturns     struct {
		result1 lock.DelegateConn
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConnector) Connect() (lock.DelegateConn, error) {
	fake.connectMutex.Lock()
	fake.connectArgsForCall = append(fake.connectArgsForCall, struct{}{})
	fake.recordInvocation("Connect", []interface{}{})
	fake.connectMutex.Unlock()
	if fake.ConnectStub != nil {
		return fake.ConnectStub()
	} else {
		return fake.connectReturns.result1, fake.connectReturns.result2
	}
}

func (fake *FakeConnector) ConnectCallCount() int {
	fake.connectMutex.RLock()
	defer fake.connectMutex.RUnlock()
	return len(fake.connectArgsForCall)
}

func (fake *FakeConnector) ConnectReturns(result1 lock.DelegateConn, result2 error) {
	fake.ConnectStub = nil
	fake.connectReturns = struct {
		result1 lock.DelegateConn
		result2 error
	}{result1, result2}
}

func (fake *FakeConnector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.connectMutex.RLock()
	defer fake.connectMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeConnector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ lock.Connector = new(FakeConnector)
