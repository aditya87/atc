// This file was generated by counterfeiter
package gcngfakes

import (
	"sync"

	"github.com/concourse/atc/db"
	"github.com/concourse/atc/gcng"
)

type FakeDBClient struct {
	ContainersBelongingToFinishedNonFailedBuildsStub        func() ([]db.SavedContainer, error)
	containersBelongingToFinishedNonFailedBuildsMutex       sync.RWMutex
	containersBelongingToFinishedNonFailedBuildsArgsForCall []struct{}
	containersBelongingToFinishedNonFailedBuildsReturns     struct {
		result1 []db.SavedContainer
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDBClient) ContainersBelongingToFinishedNonFailedBuilds() ([]db.SavedContainer, error) {
	fake.containersBelongingToFinishedNonFailedBuildsMutex.Lock()
	fake.containersBelongingToFinishedNonFailedBuildsArgsForCall = append(fake.containersBelongingToFinishedNonFailedBuildsArgsForCall, struct{}{})
	fake.recordInvocation("ContainersBelongingToFinishedNonFailedBuilds", []interface{}{})
	fake.containersBelongingToFinishedNonFailedBuildsMutex.Unlock()
	if fake.ContainersBelongingToFinishedNonFailedBuildsStub != nil {
		return fake.ContainersBelongingToFinishedNonFailedBuildsStub()
	} else {
		return fake.containersBelongingToFinishedNonFailedBuildsReturns.result1, fake.containersBelongingToFinishedNonFailedBuildsReturns.result2
	}
}

func (fake *FakeDBClient) ContainersBelongingToFinishedNonFailedBuildsCallCount() int {
	fake.containersBelongingToFinishedNonFailedBuildsMutex.RLock()
	defer fake.containersBelongingToFinishedNonFailedBuildsMutex.RUnlock()
	return len(fake.containersBelongingToFinishedNonFailedBuildsArgsForCall)
}

func (fake *FakeDBClient) ContainersBelongingToFinishedNonFailedBuildsReturns(result1 []db.SavedContainer, result2 error) {
	fake.ContainersBelongingToFinishedNonFailedBuildsStub = nil
	fake.containersBelongingToFinishedNonFailedBuildsReturns = struct {
		result1 []db.SavedContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeDBClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.containersBelongingToFinishedNonFailedBuildsMutex.RLock()
	defer fake.containersBelongingToFinishedNonFailedBuildsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDBClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gcng.DBClient = new(FakeDBClient)
